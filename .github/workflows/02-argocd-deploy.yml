# .github/workflows/02-argocd-deploy.yml
name: "02 - ArgoCD Deployment"

on:
  workflow_run:
    workflows: ["Terraform Plan and Apply"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.BACKEND_REGION }}

jobs:
  check-and-deploy-argocd:
    if: |
      github.event.workflow_run.conclusion == 'success' ||
      github.event_name == 'workflow_dispatch'
    name: "Check and Deploy ArgoCD Application"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CLOUDGURU_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CLOUDGURU_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Pull Terraform state (workflow run)
        if: github.event_name == 'workflow_run'
        run: |
          aws s3 cp ${{ github.event.workflow_run.head_commit.message }} terraform.tfstate

      - name: Pull Terraform state (manual run)
        if: github.event_name == 'workflow_dispatch'
        run: |
          aws s3 cp s3://${{ secrets.BUCKET_TF_STATE }}/terraform/final-project.tfstate terraform.tfstate

      - name: Extract EKS cluster name
        id: eks_cluster_name
        run: |
          echo "::set-output name=cluster_name::$(jq -r '.outputs.eks_cluster_name.value' terraform.tfstate)"

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.eks_cluster_name.outputs.cluster_name }}

      - name: Check if ArgoCD Application exists
        id: check_argocd
        continue-on-error: true
        run: |
          if kubectl get application shodapp -n argocd >/dev/null 2>&1; then
            echo "::set-output name=exists::true"
            echo "ArgoCD application already exists"
          else
            echo "::set-output name=exists::false"
            echo "ArgoCD application does not exist"
          fi

      - name: Check ArgoCD Namespace
        id: check_namespace
        if: steps.check_argocd.outputs.exists == 'false'
        run: |
          echo "Checking ArgoCD namespace and waiting if necessary..."
          attempts=0
          max_attempts=30
          while [ $attempts -lt $max_attempts ]; do
            if kubectl get namespace argocd >/dev/null 2>&1 && \
               kubectl get crd applications.argoproj.io >/dev/null 2>&1; then
              echo "::set-output name=ready::true"
              echo "ArgoCD is ready"
              break
            fi
            attempts=$((attempts + 1))
            echo "Attempt $attempts/$max_attempts - Waiting for ArgoCD..."
            sleep 10
          done

      - name: Deploy ArgoCD Application
        if: |
          steps.check_argocd.outputs.exists == 'false' && 
          steps.check_namespace.outputs.ready == 'true'
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: shodapp
            namespace: argocd
            finalizers:
              - resources-finalizer.argocd.argoproj.io
          spec:
            project: default
            source:
              repoURL: https://github.com/batzsalmassi/shodapp-k8s.git
              targetRevision: main
              path: k8s
            destination:
              server: https://kubernetes.default.svc
              namespace: shodapp
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - CreateNamespace=true
                - RespectIgnoreDifferences=true
              retry:
                limit: 5
                backoff:
                  duration: 5s
                  factor: 2
                  maxDuration: 3m
          EOF

      - name: Verify ArgoCD Application
        if: steps.check_argocd.outputs.exists == 'false'
        run: |
          echo "Verifying ArgoCD application status..."
          attempts=0
          max_attempts=30
          while [ $attempts -lt $max_attempts ]; do
            if kubectl get application shodapp -n argocd >/dev/null 2>&1; then
              echo "ArgoCD application is deployed"
              kubectl get application shodapp -n argocd -o jsonpath='{.status.health.status}'
              kubectl get application shodapp -n argocd -o jsonpath='{.status.sync.status}'
              break
            fi
            attempts=$((attempts + 1))
            echo "Attempt $attempts/$max_attempts - Waiting for application..."
            sleep 10
          done
